from IO import println, readline
pub import OS

@platform: not windows
import Math

func in_type(var type : type, var typelist : type) -> bool {
    return 1
}

@platform: windows
func sqrt(var num : f32) -> {f32, ValueError} {
    if (num < 0) {
        return ValueError
    }

    return num ** (1/2)
}

@platform~
func sqrt(var num : f32) -> any {
    return Math.sqrt(num)
}

pub func main(var args : str[*]) -> i32 {
    // Literals have a mutable type by default

    var nums : {f32, ValueError}[*]
    for (var i := 1, i < args.count(), i++) {
        var val := f32(args[i])

        if (val is ValueError) {
            // Error!
            println(str.format('Argument {}:{} is not a number!', i, args[i]))
        }
        // elif () {}
        // else {}

        nums.push_back(val)
    }

    for (val in nums) {
        match (val) {
            f32: lambda (var val : f32) -> none { println(val) }
            // ValueError:
            default: none
        }

        pattern (i32(val)) {
            0: lambda (var _ : i32) -> none { println("Zero!") }
            default: lambda (var _ : i32) -> none { println('Not zero!') }
        }
    }

    while (true) {
        println("Type 'q' to quit")
        var in := readline()
        if (in == 'q') {
            break
        }

        // continue
    }

    return 0
}